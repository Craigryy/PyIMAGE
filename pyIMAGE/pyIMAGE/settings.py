"""
Django settings for pyIMAGE project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0%)k@0700r#efyi_5r$7!x^bgn28w6#3yed2=44@o7g_6ap!a!'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # must
    'allauth', # must
    'allauth.account', # must
    'allauth.socialaccount', # must
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.zoom',
    'allauth.socialaccount.providers.facebook',
    'processer', 
    # 'allauth.socialaccount.providers.github',
    # 'crispy_forms',

  
]
  


SITE_ID = 1

AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
  
]



MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'pyIMAGE.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    # `allauth` needs this from django
                   'django.template.context_processors.request',
                    ],
                },
            },
        ]

WSGI_APPLICATION = 'pyIMAGE.wsgi.application'

# # Facebook authentication settings
# FACEBOOK_AUTH_SETTINGS = {
#     'METHOD': 'oauth2',
#     'SCOPE': ['email', 'public_profile', 'user_friends'],
#     'AUTH_PARAMS': {'auth_type': 'reauthenticate'},
#     'FIELDS': [
#         'id',
#         'email',
#         'name',
#         'first_name',
#         'last_name',
#         'verified',
#         'locale',
#         'timezone',
#         'link',
#         'gender',
#         'updated_time'
#     ],
#     'EXCHANGE_TOKEN': True,
#     'LOCALE_FUNC': lambda request: 'kr_KR',
#     'VERIFIED_EMAIL': False,
#     'VERSION': 'v2.4'
# }

# Google authentication settings
GOOGLE_AUTH_SETTINGS = {
    'SCOPE': ['profile', 'email'],
    'AUTH_PARAMS': {
        'access_type': 'online',
    },
    'OAUTH_PKCE_ENABLED': True,
}

# Combine the provider settings into SOCIALACCOUNT_PROVIDERS
SOCIALACCOUNT_PROVIDERS = {
    # 'facebook': FACEBOOK_AUTH_SETTINGS,
    'google': GOOGLE_AUTH_SETTINGS,
}


USE_POSTGRES = False # Set this based on your condition

if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'pyimage',  
            'USER': 'craig',      
            'PASSWORD': 'FAVOUR98',  
            'HOST': 'localhost',  
            'PORT': '',           
      }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/



# STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = 'static/'


STATIC_ROOT = "static"

STATIC = (os.path.join(BASE_DIR, 'processer','static','css'),)


# Media files (user-uploaded content)
MEDIA_URL = '/media/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

LOGIN_REDIRECT_URL = '/'

ACCOUNT_LOGOUT_REDIRECT_URL = 'account_login'

ACCOUNT_EMAIL_REQUIRED = True

# SOCIALACCOUNT_QUERY_EMAIL = True




